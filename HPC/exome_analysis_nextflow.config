//singularity.enabled = true
//singularity.cacheDir = "/scratch/mamana/singularity-containers"
//process.container = 'shub://mypandos/exome_analysis:eigensoft'

manifest {
    homePage = 'https://github.com/'
    description = 'Code for the African genomic diversity team of the GAPW of H3Africa'
    mainScript = 'exome_analysis.nf'
}

params {
    // Directories
    homedir                 = "${HOME}/exome_aibst"
    scratch_dir             = "/scratch/mamana/"
    work_dir                = "${params.scratch_dir}/exome_aibst"
    scripts                 = "${params.homedir}/scripts"
    reference_dir           = "${params.scratch_dir}/reference"

    // Data
    chromosomes             = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
//     chromosomes           = "22"
    genomedata_path         = "/spaces/mamana/GAPW/genomedata"
    // POP names must be unique to avoid ambiguity
    dataset_pops {
        KG                  = "ACB,ASW,LWK,ESN,GWD,MSL,YRI,CEU,GBR,FIN,TSI,IBS"
        AIBST               = "KNK,KNL,KNM,NGM,NGY,SAV,TZA,TZB,ZWD,ZWS"
        AIBST               = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS"
        AGVP                = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
         HGDP                = "SAN"
         HENN                = "KHOESAN"
    }
    // For annotations
    dataset_files_annot     = "AIBST,HGDP"
    // For the rest of analysis such as PCA ... except annotations
    dataset_full_files{
//        AIBST   = "${work_dir}/data/AIBST/VCF/all_samples_all_genome_vqsr_filtered_pass.vcf.gz"
        AIBST   = "${work_dir}/data/AIBST/VCF/all_samples_all_genome_vqsr_filtered_all.vcf.gz"
//        KG      = "ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
//        AGVP    = "banganda_zulu_ethiopia"
//         HENN    = "15_khomani_KhoeSan-exome-variants_updated"
//         HGDP    = "hgdp-san-exome-variants_updated"
    }
    // dataset_files = [ // dataset_name, vcf_file, sample_file, population_list
    //     ['AIBST', "${work_dir}/data/AIBST/VCF/CHRS/all_samples_all_genome_vqsr_filtered_pass_chr%s.vcf.gz", "${work_dir}/data/AIBST/aibst_all_samples.csv", "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS"],
    //     ['KG', "${reference_dir}/REF_PANELS/1000G/VCF/1000GP_Phase3/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz", "${reference_dir}/REF_PANELS/1000G/1000GP_Phase3.sample", "ACB,ASW,LWK,ESN,GWD,MSL,YRI,CEU,GBR,FIN,TSI,IBS"],
    //     ['AGVP', "${reference_dir}/AGVP/vcf_banganda_zulu_ethiopia_raw/RAW/banganda_zulu_ethiopia_%s.vcf.gz", "${reference_dir}/AGVP/banganda_zulu_ethiopia_updated.sample", "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"],
    //     ['HENN', "${reference_dir}/HENN/CHRS/15_khomani_KhoeSan-exome-variants_updated.chr%s.vcf.gz", "${reference_dir}/HENN/15_khomani_KhoeSan-exome-variants.sample", "KHOESAN"],
    //     ['HGDP', "${reference_dir}/HGDP/CHRS/hgdp-san-exome-variants_updated.chr%s.vcf.gz", "${reference_dir}/HGDP/hgdp-san-exome-variants.sample", "SAN"]
    // ]
    dataset_files{
        AIBST   = "${work_dir}/data/AIBST/VCF/CHRS/all_samples_all_genome_vqsr_filtered_pass_chr%s.vcf.gz"
        KG      = "${reference_dir}/REF_PANELS/1000G/VCF/1000GP_Phase3/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
        AGVP    = "${reference_dir}/AGVP/vcf_banganda_zulu_ethiopia_raw/RAW/banganda_zulu_ethiopia_%s.vcf.gz"
        HENN    = "${reference_dir}/HENN/CHRS/15_khomani_KhoeSan-exome-variants_updated.chr%s.vcf.gz"
        HGDP    = "${reference_dir}/HGDP/CHRS/hgdp-san-exome-variants_updated.chr%s.vcf.gz"
    }
    dataset_samples{
        AIBST               = "${work_dir}/data/AIBST/aibst_all_samples.csv"
        KG                  = "${reference_dir}/REF_PANELS/1000G/1000GP_Phase3.sample"
        AGVP                = "${reference_dir}/AGVP/banganda_zulu_ethiopia_updated.sample"
        HENN                = "${reference_dir}/HENN/15_khomani_KhoeSan-exome-variants.sample"
        HGDP                = "${reference_dir}/HGDP/hgdp-san-exome-variants.sample"
    }
    dataset_groups {
//         HGDP_HENN = "SAN"
        KNM_NGH = "KNM,NGH"
        KNM_YRI = "KNM,YRI"
        KHOESAN_SAN_YRI = "KHOESAN,SAN,YRI"
        KNM_NGY = "KNM,NGY"
        KNM_NGY_KHOESAN_SAN = "KNM,NGY,KHOESAN,SAN"
        KNM_NGY_KHOESAN = "KNM,NGY,KHOESAN"
        KNM_NGY_Amhara = "KNM,NGY,Amhara"
        // For populations differentiation analysis
        //TODO ADD Non African populations
         AIBST_HENN_HGDP = "KNK,SAN,KHOESAN"
//         AIBST = "KNK,KNL,KNM,NGM,NGY,SAV,TZA,TZB,ZWD,ZWS"
//        ALL_POPS = "JPT,ACB,CEU,IBS,ASW,LWK,KHV,CLM,STU,GBR,ESN,GWD,CDX,TSI,PJL,MSL,BEB,MXL,CHB,PUR,YRI,ITU,GIH,FIN,CHS,PEL"
        AIBST = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS"
        AIBST_NO_ZWD = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWS"
//    }
        AIBST_NO_ZWD_HENN_HGDP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWS,SAN,KHOESAN"
        AIBST_HENN_HGDP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,SAN,KHOESAN"
        AIBST_AGVP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
//    }
        EUR_KG = "CEU,GBR,FIN,TSI,IBS"
        AFR_KG = "ACB,ASW,LWK,ESN,GWD,MSL,YRI"
        //AFR_KG_ZWD = "ACB,ASW,LWK,ESN,GWD,MSL,YRI,ZWD"
        AGVP = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
        AGVP_ZWD = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu,ZWD"
        HGDP_HENN = "SAN,KHOESAN"
//        KNP_HGDP_HENN = "KNP,SAN,KHOESAN"
        ////KNP_HENN = "KNP,KHOESAN"
        // //HGDP = "SAN"
        //// HENN = "KHOESAN"
//        AFR_ALL = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,ACB,ASW,LWK,ESN,GWD,MSL,YRI,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
        AFR_ALL = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,ACB,ASW,LWK,ESN,GWD,MSL,YRI,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu,SAN,KHOESAN"
        ALL = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,ACB,ASW,LWK,ESN,GWD,MSL,YRI,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu,SAN,KHOESAN,CEU,GBR,FIN,TSI,IBS"
        //// EAS = "CDX,CHB,CHS,JPT,KHV"
        //// AMR = "CLM,MXL,PEL,PUR"
        //// SAS = "BEB,GIH,ITU,PJL,STU"
     }
    // Group to analyse for FST, FRQ which contains all populations
    GROUP_POPS_ANALYSIS = "AIBST_ALL" //KNP_HGDP_HENN"//,AIBST_ALL,AFR_ALL"

    //// conda dir
    conda_dir               = "${HOME}/.conda/envs/ngs_py35"

    //// VEP
    vep_db_dir              = "${reference_dir}/ensembl"

    //snpEff
    snpeff                  = "/usr/local/bin/snpEff/snpEff.jar "
    snpeff_config1           = "${conda_dir}/share/snpeff-4.3.1m-0/snpEff.config"
    snpeff_config           = "${conda_dir}/share/snpeff-4.3.1m-0/snpEff.config"
    snpsift                 = "/usr/local/bin/snpEff/SnpSift.jar "
    snpEff_database         = "${reference_dir}/snpEff_database"
    snpEff_dbsnp_url        = "ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz"
    snpEff_gwascatalog      = "http://www.genome.gov/admin/gwascatalog.txt"
    snpEff_dbsnp_vcf        = "${reference_dir}/dbSNP/dbSNP_human_9606_b150_GRCh37p13.vcf.gz"
    snpEff_dbnsfp_db        = "/scratch/mamana/dbNSFP/dbNSFPv3.4c/dbNSFP3.4c.txt.gz"
    // snpEff_gwascatalog
    snpEff_human_db         = "GRCh37.75"

    //// ExAc database
    exac_db_vcf             = "${reference_dir}/ExAC/ExAC.r1.sites.vep.vcf.gz"

    //// dbNSFP database
    dbnsfp_db               = "${reference_dir}/dbNSFP/dbNSFPv3.5a_b37.txt.gz"

    //// 1000 Genomes ancestral alignments
    human_ancestor_fa_db    = "${reference_dir}/ensembl/ancestral_alignments/human_ancestor.fa.gz"

    //// PGX dataset
    pxg_dataset_dir                     = "${work_dir}/PGX_DATA"
    clinicalVariants_db                 = "${pxg_dataset_dir}/Clinically_relavent_PGX_variants_Prof_Collen_pos.tsv"
//    clinicalVariants_db                 = "${pxg_dataset_dir}/clinicalAnnotations_07_2017.csv"
    pgxClinicalLevel1                   = "${pxg_dataset_dir}/pgxClinicalLevel1_04_2018_rsID_AIBST_forR.csv"
    cadd_annotations                    = "${pxg_dataset_dir}/pgx1000GP.VEP.cadd.annotations.tsv"
    //pgx_variants                        = "${pxg_dataset_dir}/ALL_genes_variants_final.tsv"
    pgx_variants                        = "${pxg_dataset_dir}/Extended_PGX_gene_AIBST_exome_final_slop25_unique.bed"
//    gene_regions                        = "${pxg_dataset_dir}/PGX_gene_coordinates_AIBST_exome_final.bed"
//    gene_regions_slop                   = "${pxg_dataset_dir}/Extended_PGX_gene_AIBST_exome_final_slop25_unique.bed"
    gene_regions_slop                   = "${pxg_dataset_dir}/PGX_gene_coordinates_AIBST_exome_final.bed"
    strict_mask_whole_genome_final      = "${pxg_dataset_dir}/20141020.strict_mask.whole_genome_final.bed"
    so_term_file                        = "${pxg_dataset_dir}/SO.terms"
    so_coding_terms                     = "${pxg_dataset_dir}/SO.coding.terms"
    final_all_pharmacogenes_details     = "${pxg_dataset_dir}/ALL_genes.csv"
    lof_cutoff = '0.01'


    // Convert the following file to a bed
    //curl -O http://humanparalogy.gs.washington.edu/build37/data/GRCh37GenomicSuperDup.tab
    //awk 'NR>1 {print $1"	"$2"	"$3}' GRCh37GenomicSuperDup.tab | sed s/^chr//g > GRCh37GenomicSuperDup.bed
    GRCh37GenomicSuperDup   = "${pxg_dataset_dir}/GRCh37GenomicSuperDup.bed"

    gatk                    = "java -Xmx15g -jar ${conda_dir}/bin/GenomeAnalysisTK.jar "
    ref_genome              = "${reference_dir}/gatk_bundle/human_g1k_v37_decoy.fasta" // must have .fasta and .dict From ftp://ftp.broadinstitute.org/bundle/b37/
    dbsnp_sites             = "${reference_dir}/dbSNP/dbSNP_human_9606_b150_GRCh37p13.vcf.gz" //
    hapmap_sites            = "${reference_dir}/gatk_bundle/hapmap_3.3.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    omni_kg_sites           = "${reference_dir}/gatk_bundle/1000G_omni2.5.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    kg_sites                = "${reference_dir}/gatk_bundle/1000G_phase3_v4_20130502.sites.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    mills_sites             = "${reference_dir}/gatk_bundle/Mills_and_1000G_gold_standard.indels.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
//     Genetic map for Eagle
    genetic_map             = "${reference_dir}/genetic_map/genetic_map_hg19_withX.txt.gz"

    // From "http://www.genome.gov/admin/gwascatalog.txt" lift over to b37 using crossmap
    gwascat_b37       = "${reference_dir}/gwascat/gwas_catalog_v1.0-associations_e89_r2017-08-15_b37.tsv"

    // Clinvar from ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/vcf_2.0/clinvar_20170802.vcf.gz
    clinvar           = "${reference_dir}/clinvar/clinvar_20170802.vcf.gz"

    //
    cosmic                  = "${reference_dir}/cosmic/CosmicCodingMuts.vcf"

    mafs_annotations{
        // MAFs other databases
        KG             = "${reference_dir}/REF_PANELS/1000G/Allele_Freqs/KG.mafs"
        gnomAD         = "${reference_dir}/gnomAD/genomes/Allele_Freqs/gnomAD.mafs"
        ExAC           = "${reference_dir}/gnomAD/exomes/Allele_Freqs/ExAC.mafs"
        trypanogen     = "${reference_dir}/pop_mafs/trypanogen.all.phased.frq.mamana_ready_"
        sahgp          = "${reference_dir}/pop_mafs/sahgp.frq.frq.mamana_ready_"
        agvp           = "${reference_dir}/pop_mafs/agv3f.frq.frq.mamana_ready_"
//        other          = "${reference_dir}/pop_mafs/dbNSFPv3.5a_b37_af_final.frq"
    }

    mafs_annotations_afr{
        // MAFs other databases
        KG             = "${reference_dir}/REF_PANELS/1000G/Allele_Freqs/KG_afr.mafs"
        gnomAD         = "${reference_dir}/gnomAD/genomes/Allele_Freqs/gnomAD_afr.mafs"
        ExAC           = "${reference_dir}/gnomAD/exomes/Allele_Freqs/ExAC_afr.mafs"
        trypanogen     = "${reference_dir}/pop_mafs/trypanogen.all.phased.frq.mamana_ready_"
        sahgp          = "${reference_dir}/pop_mafs/sahgp.frq.frq.mamana_ready_"
        agvp           = "${reference_dir}/pop_mafs/agv3f.frq.frq.mamana_ready_"
    }


    // ancestral alignments for ancestral allele annotation
    genomedata_path         = "${reference_dir}/genomedata"

}

process {
    withLabel : "small"{
        memory = { 9.GB * task.attempt }
    }
    withLabel : "medium"{
        memory = { 18.GB * task.attempt }
    }
    withLabel : "bigmem"{
        memory = { 27.GB * task.attempt }
        time = { 72.h }
    }
    withLabel: "extrabig" {
        container       = 'docker://quay.io/mypandos/pgx_tools'
        memory          = { 150.GB * task.attempt }
        cpus            = { 15 * task.attempt }
        time            = { 72.h }
        errorStrategy   = 'ignore'
    }

}
executor{
    jobName = { "$task.tag" }
    stageOutMode = "rsync"
}
profiles {
    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    local {
        executor {
            name = "local"
            cpus = 2
        }
        docker {
            enabled = false
        }
    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        executor{
            queueSize = 30
        }
        process{
            executor        = 'pbs'
            queue           = 'UCTlong'
            maxRetries      = 0
            maxErrors       = 10000
//            errorStrategy   = { if (task.exitStatus == 143) { 'retry' } else if (task.exitStatus == 137 ) { 'retry' } else { 'terminate' } }
            errorStrategy   = 'retry'
//            scratch         = "${params.work_dir}/"
            clusterOptions  = { "-l nodes=1:ppn=$task.cpus:series600" }
        }
    }
    Singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "/scratch/mamana/singularity-containers"
        process.container = 'docker://quay.io/mypandos/pgx_tools'
        singularity.runOptions = " -B ${params.scratch_dir} " // add any paths that need   to be mounted here
    }
    slurm {
        executor{
            queueSize = 40
        }
        process{
            executor        = 'slurm'
            queue           = 'ada'
            maxRetries      = 0
            maxErrors       = 10000
            errorStrategy   = 'retry'
            clusterOptions  = { "--mail-user=mbymam001@myuct.ac.za --account=cbio" }
        }
    }
}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
