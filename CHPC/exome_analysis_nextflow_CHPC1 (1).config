plinkImage="h3abionet_org/h3agwas-plink"
gemmaImage="h3abionet_org/h3agwas-gemma"
bioperlImage="bioperl/bioperl"
rEngineImage="h3abionet_org/h3agwas-r"
latexImage="h3abionet_org/h3agwas-texlive"
swarmPort = '2376'

manifest {
    homePage = 'https://github.com/'
    description = 'Code for the African genomic diversity team of the GAPW of H3Africa'
    mainScript = 'exome_analysis.nf'
}

params {
    // Directories
    homedir                 = "${HOME}/exome_aibst"
    work_dir                = "/mnt/lustre/users/mmbiyavanga/exome_aibst"
    scripts                 = "${params.homedir}/scripts"
    reference_dir           = "/mnt/lustre/users/mmbiyavanga/reference"
    // Data
    //chromosomes             = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
    chromosomes             = "21,22"
    genomedata_path         = "/spaces/mamana/GAPW/genomedata"
    // POP names must be unique to avoid ambiguity
    POPS {
//        KG                  = "ACB,ASW,LWK,ESN,GWD,MSL,YRI"
        AIBST               = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS"
//        AGVP                = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
//        HGDP                = "SAN"
        HENN                = "KHOESAN,"
    }
    POP_samples{
        //AIBST               = "${work_dir}/data/AIBST/aibst_all_samples.csv"
        //KG                  = "integrated_call_samples_v3.20130502.ALL.panel"
        //AGVP                = "banganda_zulu_ethiopia_updated.sample"
        HENN                = "${work_dir}/data/HENN/15_khomani_KhoeSan-exome-variants.sample"
        //HGDP                = "hgdp-san-exome-variants.sample"
    }
    // For annotations
    dataset_files_annot     = "HENN;"
    // For the rest of analysis such as PCA ... except annotations
    dataset_full_files{
        //AIBST   = "${work_dir}/data/AIBST/VCF/all_samples_all_genome_vqsr_filtered_pass.vcf.gz"
        //KG      = "ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
        //AGVP    = "banganda_zulu_ethiopia"
        HENN    = "${work_dir}/data/HENN/VCF/test_data.vcf.gz"
        //HGDP    = "hgdp-san-exome-variants_updated"
    }
    dataset_files{
        //AIBST   = "${work_dir}/data/AIBST/VCF/all_samples_all_genome_vqsr_filtered_pass_chr%s.vcf.gz"
        //KG      = "ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
        //AGVP    = "banganda_zulu_ethiopia"
    //    HENN    = "${work_dir}/data/HENN/VCF/15_khomani_KhoeSan-exome-variants_updated.chr%s.vcf.gz"
        //HGDP    = "${work_dir}/data/HGDP/VCF/hgdp-san-exome-variants_updated.chr%s.vcf.gz"
        HENN    = "${work_dir}/data/HENN/VCF/test_data.chr%s.vcf.gz"
    }
    GROUP_POPS {
        // For populations differentiation analysis
        //TODO ADD Non african populations
        // ALL_POPS = "JPT,ACB,CEU,IBS,ASW,LWK,KHV,CLM,STU,GBR,ESN,GWD,CDX,TSI,PJL,MSL,BEB,MXL,CHB,PUR,YRI,ITU,GIH,FIN,CHS,PEL"
        AIBST_ALL = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS"
        AIBST_NO_ZWD = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWS"
        AIBST_NO_ZWD_HENN_HGDP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWS,SAN,KHOESAN"
        AIBST_HENN_HGDP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,SAN,KHOESAN"
        AIBST_AGVP = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
        // // EUR_KG = "CEU,GBR"
        AFR_KG = "ACB,ASW,LWK,ESN,GWD,MSL,YRI"
        AFR_KG_ZWD = "ACB,ASW,LWK,ESN,GWD,MSL,YRI,ZWD"
        AGVP = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu"
        AGVP_ZWD = "Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu,ZWD"
        HGDP_HENN = "SAN,KHOESAN"
        KNP_HGDP_HENN = "KNP,SAN,KHOESAN"
        ////KNP_HENN = "KNP,KHOESAN"
        // //HGDP = "SAN"
        //// HENN = "KHOESAN"
        AFR_ALL = "KNK,KNL,KNM,KNP,NGH,NGI,NGY,SAV,TZA,TZB,ZWD,ZWS,ACB,ASW,LWK,ESN,GWD,MSL,YRI,Amhara,Baganda,Gumuz,Oromo,Somali,Wolayta,Zulu,SAN,KHOESAN"
        //// EAS = "CDX,CHB,CHS,JPT,KHV"
        //// AMR = "CLM,MXL,PEL,PUR"
        //// SAS = "BEB,GIH,ITU,PJL,STU"
    }
        // Group to analyse for FST, FRQ which contains all populations
    GROUP_POPS_ANALYSIS = "AIBST_ALL" //KNP_HGDP_HENN"//,AIBST_ALL,AFR_ALL"
    
    //// conda dir
    conda_dir               = "/home/mmbiyavanga/.conda/envs/ngs_py35"
    
    //// VEP
    vep_db_dir              = "${reference_dir}/ensembl"
    
    //snpEff
    snpEff                  = "java -Xmx15g -jar ${conda_dir}/share/snpeff-4.3.1p-1/snpEff.jar "
    snpeff_config           = "${conda_dir}/share/snpeff-4.3.1p-1/snpEff.config"
    snpSift                 = "java -Xmx15g -jar ${conda_dir}/share/snpsift-4.3.1p-0/SnpSift.jar "
    snpEff_database         = "${reference_dir}/snpEff_database"
    snpEff_dbsnp_url        = "ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz"
    snpEff_gwascatalog      = "http://www.genome.gov/admin/gwascatalog.txt"
    snpEff_gwascat_db       = "${reference_dir}/gwascatalog.txt"
    snpEff_dbsnp_vcf        = "${reference_dir}/dbSNP/dbSNP_human_9606_b150_GRCh37p13.vcf.gz"
    snpEff_dbnsfp_db        = "/mnt/lustre/users/mmbiyavanga/dbNSFP/dbNSFPv3.4c/dbNSFP3.4c.txt.gz"
    // snpEff_gwascatalog
    snpEff_human_db         = "GRCh37.75"
    
    //// ExAc database
    exac_db_vcf             = "${reference_dir}/ExAC/ExAC.r1.sites.vep.vcf.gz"
    
    //// dbNSFP database
    dbnsfp_db_vcf           = "${reference_dir}/dbNSFP/dbNSFPv3.4c/dbNSFP3.4c.txt.gz"
    
    //// 1000 Genomes ancestral alignments
    human_ancestor_fa_db    = "${reference_dir}/ensembl/ancestral_alignments/human_ancestor.fa.gz"
    
    //// PGX dataset
    pxg_dataset_dir         = "${work_dir}/PGX_DATA"
    clinicalVariants_db     = "${pxg_dataset_dir}/clinicalAnnotations_07_2017.csv"
    cadd_annotations        = "${pxg_dataset_dir}/pgx1000GP.VEP.cadd.annotations.tsv"
    pgx_snps                = "ALL_PGx_variants.tsv"
    gene_regions            = "${pxg_dataset_dir}/PGX_gene_coordinates_AIBST_exome.bed"
    
    gatk                    = "java -Xmx15g -jar ${conda_dir}/bin/GenomeAnalysisTK.jar "
    ref_genome              = "${reference_dir}/gatk_bundle/human_g1k_v37_decoy.fasta" // must have .fasta and .dict From ftp://ftp.broadinstitute.org/bundle/b37/
    dbsnp_sites             = "${reference_dir}/dbSNP/dbSNP_human_9606_b150_GRCh37p13.vcf" //
    hapmap_sites            = "${reference_dir}/gatk_bundle/hapmap_3.3.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    omni_kg_sites           = "${reference_dir}/gatk_bundle/1000G_omni2.5.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    kg_sites                = "${reference_dir}/gatk_bundle/1000G_phase3_v4_20130502.sites.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    mills_sites             = "${reference_dir}/gatk_bundle/Mills_and_1000G_gold_standard.indels.b37.vcf" // From ftp://ftp.broadinstitute.org/bundle/b37/
    
    // Genetic map for Eagle
    genetic_map             = "${reference_dir}/genetic_map/genetic_map_hg19_withX.txt.gz"
    
    // From "http://www.genome.gov/admin/gwascatalog.txt" lift over to b37 using crossmap
    gwascat_b37             = "${reference_dir}/gwascat/gwas_catalog_v1.0-associations_e89_r2017-08-15_b37.tsv"
    
    // Clinvar from ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/vcf_2.0/clinvar_20170802.vcf.gz
    clinvar                 = "${reference_dir}/clinvar/clinvar_20170802.vcf.gz"
    
    //
    cosmic                  = "${reference_dir}/cosmic/CosmicCodingMuts.vcf"

    // MAFs other databases
    mafs_annotations{
        // MAFs other databases
        KG             = "${reference_dir}/1000G/Allele_Freqs/KG.mafs"
        gnomAD         = "${reference_dir}/gnomAD/genomes/Allele_Freqs/gnomAD.mafs"
        ExAC           = "${reference_dir}/gnomAD/exomes/Allele_Freqs/ExAC.mafs"
        trypanogen     = "${reference_dir}/pop_mafs/trypanogen.all.phased.frq.mamana_ready_"
        sahgp          = "${reference_dir}/pop_mafs/sahgp.frq.frq.mamana_ready_"
        agvp           = "${reference_dir}/pop_mafs/agv3f.frq.frq.mamana_ready_"
//        other          = "${reference_dir}/pop_mafs/dbNSFPv3.5a_b37_af_final.frq"
    }
    
}
process {
    echo = true
}
executor{
    jobName = { "$task.tag" }
}
profiles {
    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    local {
        //params {
        //threadCounts = [ 4 ]
        //alignThreads = 4
        //resultsDir = "results"
        //}
        executor {
            name = "local"
            cpus = 2
        }
        docker {
            enabled = false
        }
    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process{
        executor        = 'pbs'
//        cpus            = 1
        queue           = 'normal'
        //            queue           = { if (task.cpus < 9) {'UCTlong'} else {'CLOUDHMQ'}}
//        memory          = 4.GB
//        time            = 4.h
        maxRetries      = 10
        maxErrors       = 10000
        //errorStrategy   = { if (task.exitStatus == 143) { 'retry' } else if (task.exitStatus == 137 ) { 'retry' } else { 'terminate' } }
        clusterOptions  = " -P CBBI0825"// -l select=2:ncpus=24 -q normal -l walltime=24:00:00"
        scratch         = "${params.work_dir}/"
    }
}
}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}

